import { screen, render } from '@testing-library/react';
import { toPlainObject } from 'lodash';

import RepositoryList from '../../../../../../src/components/Dashboard/Routes/User/AddReview/RepositoryList';

import { mockNavigate } from '../../../../../setup';
import { db } from '../../../../../mocks/db';
import { IConnection } from '../../../../../../src/interfaces';
import { getLoggedInUser } from '../../../../../utils';
import userEvent from '@testing-library/user-event';

vi.mock('../../../../../../src/util/SessionService', () => ({
  Session: {
    getItem: vi.fn(() => 123),
  },
}));

vi.mock('../../../../../../src/util', async () => {
  const actual = await vi.importActual<typeof import('../../../../../../src/util')>('../../../../../../src/util');

  return {
    ...actual,
    retrieveTokens: () => ({
      token: 'mock-token',
      refreshToken: 'mock-refresh',
    }),
  };
});

describe('RepositoryList', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  const getForm = () => {
    return {
      getReviewType: () => screen.getByRole('combobox', { name: /type of review/i }),
      getPackagePlan: () => screen.getByRole('combobox', { name: /plan/i }),
      getSubmitBtn: () => screen.getByRole('button', { name: /submit/i }),
    };
  };

  const renderComponent = (overrides: Partial<IConnection> = {}) => {
    const connectionEntity = db.connection.create();

    const selectedReviewer: IConnection = {
      ...toPlainObject(connectionEntity),
      receiverId: 2,
      senderId: 1,
      ...overrides,
    };

    const { wrapper } = getLoggedInUser(
      {},
      {
        addReview: {
          selectedReviewer,
        },
      }
    );

    render(<RepositoryList />, { wrapper });

    return {
      user: userEvent.setup(),
      form: getForm(),
      getRepos: () => screen.findAllByTestId('Repository'),
    };
  };

  it('should render repositories fetched from API', async () => {
    const { getRepos } = renderComponent();

    expect(await screen.findByText(/click on a repository/i)).toBeInTheDocument();

    const repositoryItems = await getRepos();

    expect(repositoryItems.length).toBeGreaterThan(0);
  });

  it('should paginate and show "More repositories"... when nextPageUrl exists', async () => {
    const { user, getRepos } = renderComponent();

    const moreReposBtn = await screen.findByText(/more repositories/i);

    expect(moreReposBtn).toBeInTheDocument();

    await user.click(moreReposBtn);

    const repos = await getRepos();
    expect(repos.length).toBe(4);
  });

  it('should show error if review type or package is missing on submit', async () => {
    const { user, form, getRepos } = renderComponent();

    const repos = await getRepos();

    await user.click(repos[0]);

    await user.click(form.getSubmitBtn());

    expect(await screen.findByText(/please select a package/i)).toBeInTheDocument();
  });

  it('should show selected repository and charge message after selection', async () => {
    const { user, form, getRepos } = renderComponent();

    await getRepos();

    const { getReviewType, getPackagePlan } = form;

    await user.selectOptions(getReviewType(), ['BUG']);
    await user.selectOptions(getPackagePlan(), ['50']);

    const repoCard = await getRepos();

    await user.click(repoCard[0]);

    expect(await screen.findByText(/You have selected .* as the repository/i)).toBeInTheDocument();

    expect(screen.getByText(/You will be charged/i)).toBeInTheDocument();
  });
});
